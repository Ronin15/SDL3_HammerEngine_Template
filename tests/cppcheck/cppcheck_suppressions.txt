# Cppcheck Suppressions File for SDL3_ForgeEngine_Template
# This file suppresses false positives and irrelevant warnings

# Suppress missing include warnings for project headers
missingInclude:*/core/Logger.hpp
missingInclude:*/core/GameEngine.hpp
missingInclude:*/managers/InputManager.hpp
missingInclude:*/managers/UIManager.hpp
missingInclude:*/managers/AIManager.hpp
missingInclude:*/managers/FontManager.hpp
missingInclude:*/managers/TextureManager.hpp
missingInclude:*/managers/SoundManager.hpp
missingInclude:*/managers/EventManager.hpp
missingInclude:*/managers/SaveGameManager.hpp
missingInclude:*/ai/AIBehavior.hpp
missingInclude:*/ai/behaviors/ChaseBehavior.hpp
missingInclude:*/ai/behaviors/PatrolBehavior.hpp
missingInclude:*/ai/behaviors/WanderBehavior.hpp
missingInclude:*/events/NPCSpawnEvent.hpp
missingInclude:*/entities/playerStates/PlayerRunningState.hpp
missingInclude:*/gameStates/EventDemoState.hpp
missingInclude:*/gameStates/AIDemoState.hpp
missingInclude:*/gameStates/MainMenuState.hpp
missingInclude:*/gameStates/UIExampleState.hpp
missingInclude:*/gameStates/OverlayDemoState.hpp
missingInclude:*/utils/Vector2D.hpp
missingInclude:*/utils/BinarySerializer.hpp

# Suppress library function checks for logging macros
checkLibraryFunction:GAMEENGINE_*
checkLibraryFunction:TEXTURE_*
checkLibraryFunction:SOUND_*
checkLibraryFunction:FONT_*
checkLibraryFunction:AI_*
checkLibraryFunction:EVENT_*
checkLibraryFunction:INPUT_*
checkLibraryFunction:UI_*
checkLibraryFunction:SAVEGAME_*
checkLibraryFunction:GAMESTATE_*
checkLibraryFunction:GAMELOOP_*
checkLibraryFunction:THREADSYSTEM_*
checkLibraryFunction:HAMMER_*

# Suppress library function checks for singleton patterns
checkLibraryFunction:*Instance
checkLibraryFunction:GameEngine::Instance
checkLibraryFunction:AIManager::Instance
checkLibraryFunction:UIManager::Instance
checkLibraryFunction:FontManager::Instance
checkLibraryFunction:InputManager::Instance
checkLibraryFunction:SoundManager::Instance
checkLibraryFunction:TextureManager::Instance
checkLibraryFunction:EventManager::Instance
checkLibraryFunction:ThreadSystem::Instance

# Suppress library function checks for custom utility classes
checkLibraryFunction:Vector2D*
checkLibraryFunction:getPosition
checkLibraryFunction:getX
checkLibraryFunction:getY
checkLibraryFunction:lengthSquared
checkLibraryFunction:setX
checkLibraryFunction:setY

# Suppress library function checks for common engine patterns
checkLibraryFunction:getPlayerReference
checkLibraryFunction:isPlayerValid
checkLibraryFunction:getGameStateManager
checkLibraryFunction:setState
checkLibraryFunction:registerBehavior
checkLibraryFunction:hasBehavior
checkLibraryFunction:wasKeyPressed
checkLibraryFunction:isKeyDown
checkLibraryFunction:createLabel
checkLibraryFunction:enableTextBackground
checkLibraryFunction:drawRect
checkLibraryFunction:drawBorder
checkLibraryFunction:getComponent
checkLibraryFunction:checkLineOfSight
checkLibraryFunction:onTargetReached
checkLibraryFunction:onTargetLost
checkLibraryFunction:handleNoLineOfSight
checkLibraryFunction:setActive
checkLibraryFunction:init
checkLibraryFunction:getCurrentTimeNanos

# Suppress SDL3 library function checks
checkLibraryFunction:SDL_GetError
checkLibraryFunction:SDL_*

# Suppress standard library function checks
checkLibraryFunction:std::filesystem::exists
checkLibraryFunction:std::exception::what

# Suppress container method warnings
checkLibraryFunction:size
checkLibraryFunction:empty
checkLibraryFunction:begin
checkLibraryFunction:end
checkLibraryFunction:push_back
checkLibraryFunction:emplace_back
checkLibraryFunction:insert
checkLibraryFunction:erase
checkLibraryFunction:find

# Suppress smart pointer method warnings
checkLibraryFunction:reset
checkLibraryFunction:release
checkLibraryFunction:get
checkLibraryFunction:operator->
checkLibraryFunction:operator*

# Suppress template instantiation warnings
unusedFunction:*template*
unusedFunction:*<anonymous>*

# Suppress warnings for benchmark/test code
unusedFunction:*benchmark*
unusedFunction:*test*
unusedFunction:*Test*
unusedFunction:*BOOST_*

# Suppress warnings for generated/external code directories
*:*/build/*
*:*/temp/*
*:*/.cache/*
*:*/test_results/*
*:*/bin/*
*:*/compile_commands.json
*:*/cppcheck_results.xml

# Variables used in debug logging that are conditionally compiled
unreadVariable:*/InputManager.cpp:303
unreadVariable:*/InputManager.cpp:304
unreadVariable:*/InputManager.cpp:305
unreadVariable:*/InputManager.cpp:306
unreadVariable:*/InputManager.cpp:307
unreadVariable:*/InputManager.cpp:308
unreadVariable:*/InputManager.cpp:309
unreadVariable:*/InputManager.cpp:403
unreadVariable:*/InputManager.cpp:404
unreadVariable:*/InputManager.cpp:405
unreadVariable:*/InputManager.cpp:406
unreadVariable:*/InputManager.cpp:407
unreadVariable:*/InputManager.cpp:408
unreadVariable:*/InputManager.cpp:409
unreadVariable:*/InputManager.cpp:410
unreadVariable:*/InputManager.cpp:411
unreadVariable:*/InputManager.cpp:412
unreadVariable:*/InputManager.cpp:413
unreadVariable:*/InputManager.cpp:414
unreadVariable:*/InputManager.cpp:415
unreadVariable:*/InputManager.cpp:416
unreadVariable:*/InputManager.cpp:417
unreadVariable:*/InputManager.cpp:418

# Variables used in debug builds only
variableScope:*/ThreadSystem.hpp:572
variableScope:*/ThreadSystem.hpp:584
variableScope:*/FontManager.cpp:72
variableScope:*/FontManager.cpp:117
variableScope:*/SoundManager.cpp:76
variableScope:*/SoundManager.cpp:148

# Variables used only in debug logging macros (removedCount)
unreadVariable:*/ParticleManager.cpp:1077
unreadVariable:*/ParticleManager.cpp:1210
unreadVariable:*/ParticleManager.cpp:1288
unreadVariable:*/ParticleManager.cpp:1873

# Variables used only in debug logging macros (axisName, buttonName)
unreadVariable:*/InputManager.cpp:310
unreadVariable:*/InputManager.cpp:311
unreadVariable:*/InputManager.cpp:312
unreadVariable:*/InputManager.cpp:313
unreadVariable:*/InputManager.cpp:314
unreadVariable:*/InputManager.cpp:315
unreadVariable:*/InputManager.cpp:419
unreadVariable:*/InputManager.cpp:420
unreadVariable:*/InputManager.cpp:421
unreadVariable:*/InputManager.cpp:422
unreadVariable:*/InputManager.cpp:423
unreadVariable:*/InputManager.cpp:424

# InputManager debug variables (updated line numbers from current cppcheck output)
unreadVariable:*/InputManager.cpp:321
unreadVariable:*/InputManager.cpp:322
unreadVariable:*/InputManager.cpp:323
unreadVariable:*/InputManager.cpp:324
unreadVariable:*/InputManager.cpp:325
unreadVariable:*/InputManager.cpp:326
unreadVariable:*/InputManager.cpp:327
unreadVariable:*/InputManager.cpp:425
unreadVariable:*/InputManager.cpp:426
unreadVariable:*/InputManager.cpp:427
unreadVariable:*/InputManager.cpp:428
unreadVariable:*/InputManager.cpp:429
unreadVariable:*/InputManager.cpp:430
unreadVariable:*/InputManager.cpp:431
unreadVariable:*/InputManager.cpp:432
unreadVariable:*/InputManager.cpp:433
unreadVariable:*/InputManager.cpp:434
unreadVariable:*/InputManager.cpp:435
unreadVariable:*/InputManager.cpp:436

# Variables used only in debug builds or debug logging
unreadVariable:*/GameEngine.cpp:666
unreadVariable:*/GameEngine.cpp:674
unreadVariable:*/AIManager.cpp:235
unreadVariable:*/AIManager.cpp:327
unreadVariable:*/ParticleManager.cpp:1291
unreadVariable:*/GameStateManager.cpp:39
unreadVariable:*/InventoryComponent.cpp:547
unreadVariable:*/InventoryComponent.cpp:792
unreadVariable:*/InventoryComponent.cpp:813

# Debug variables used in GAMEENGINE_DEBUG macros
unreadVariable:*/GameEngine.cpp:650
unreadVariable:*/GameEngine.cpp:658
unreadVariable:*/GameEngine.cpp:262
unreadVariable:*/GameEngine.cpp:263
unreadVariable:*/GameEngine.cpp:292
unreadVariable:*/GameEngine.cpp:293

# Debug variables used in PLAYER_DEBUG and NPC_DEBUG macros
unreadVariable:*/Player.cpp:273
unreadVariable:*/NPC.cpp:249

# Performance monitoring variables used in debug logging (conditionally compiled)
unreadVariable:*/AIManager.cpp:259
unreadVariable:*/AIManager.cpp:368
unreadVariable:*/AIManager.cpp:375
unreadVariable:*/AIManager.cpp:376
unreadVariable:*/AIManager.cpp:377
unreadVariable:*/EventManager.cpp:176
unreadVariable:*/EventManager.cpp:177
unreadVariable:*/EventManager.cpp:178
unreadVariable:*/ParticleManager.cpp:746
unreadVariable:*/ParticleManager.cpp:747
unreadVariable:*/ParticleManager.cpp:748
unreadVariable:*/ParticleManager.cpp:749
unreadVariable:*/ParticleManager.cpp:1847
unreadVariable:*/ParticleManager.cpp:1849
unreadVariable:*/GameEngine.cpp:643
unreadVariable:*/GameEngine.cpp:651
unreadVariable:*/GameEngine.cpp:259
unreadVariable:*/GameEngine.cpp:260
unreadVariable:*/InventoryComponent.cpp:554
unreadVariable:*/InventoryComponent.cpp:799
unreadVariable:*/InventoryComponent.cpp:820

# Debug/profiling utility functions kept for development
unusedFunction:*/ThreadSystem.hpp:337

# API functions kept for potential future use or external interfaces
unusedFunction:*/ResourceTemplateManager.cpp:686
unusedFunction:*/ResourceTemplateManager.cpp:717
unusedFunction:*/ResourceFactory.cpp:180
unusedFunction:*/UIManager.cpp:2627
unusedFunction:*/GamePlayState.cpp:470
unusedFunction:*/EventFactory.cpp:263

# Performance suggestions that may be intentionally ignored for readability
useStlAlgorithm:*/InventoryComponent.cpp:746

# Performance-critical paths where raw loops are faster than STL algorithms
useStlAlgorithm:*/ThreadSystem.hpp:166
useStlAlgorithm:*/ThreadSystem.hpp:203
useStlAlgorithm:*/ThreadSystem.hpp:274
useStlAlgorithm:*/InventoryComponent.cpp:475
useStlAlgorithm:*/InventoryComponent.cpp:484
useStlAlgorithm:*/InventoryComponent.cpp:753
useStlAlgorithm:*/EntityStateManager.cpp:50

# Conditions that are always false due to current implementation but kept for defensive programming
knownConditionTrueFalse:*/GuardBehavior.cpp:417
knownConditionTrueFalse:*/EventManager.cpp:448
knownConditionTrueFalse:*/EventManager.cpp:453

# Defensive null checks that may appear always true/false but provide safety
knownConditionTrueFalse:*/EventDemoState.cpp:1916
knownConditionTrueFalse:*/GamePlayState.cpp:411
knownConditionTrueFalse:*/EventManager.cpp:77
knownConditionTrueFalse:*/EventManager.cpp:954
knownConditionTrueFalse:*/WorldGenerator.cpp:69

# Defensive bounds checks that appear as dead code but provide platform safety
oppositeInnerCondition:*/ParticleManager.cpp:465
oppositeInnerCondition:*/ParticleManager.cpp:1807

# Variable shadowing in demo code (acceptable in demo contexts)
shadowVariable:*/EventDemoState.cpp:1002

# Const reference opportunities that would break functionality
constVariableReference:*/GamePlayState.cpp:108
constVariableReference:*/PauseState.cpp:78

# Suppress common external library style issues
# JsonReader library - non-explicit constructors are intentional for API usability
noExplicitConstructor:*/utils/JsonReader.hpp:60
noExplicitConstructor:*/utils/JsonReader.hpp:61  
noExplicitConstructor:*/utils/JsonReader.hpp:62

# Variables used in debug logging macros (conditionally compiled)
unreadVariable:*/entities/NPC.cpp:297
unreadVariable:*/entities/Player.cpp:285
unreadVariable:*/ai/internal/SpatialPriority.cpp:284
unreadVariable:*/ai/internal/SpatialPriority.cpp:361
unreadVariable:*/ai/pathfinding/PathfindingGrid.cpp:192

# Defensive checks in simplified implementations 
knownConditionTrueFalse:*/ai/behaviors/GuardBehavior.cpp:422
knownConditionTrueFalse:*/ai/pathfinding/PathfindingGrid.cpp:444

# Future-use functions in behaviors (marked with [[maybe_unused]])
unusedFunction:*/include/ai/behaviors/ChaseBehavior.hpp:84
unusedFunction:*/include/ai/behaviors/FleeBehavior.hpp:148
unusedFunction:*/include/ai/behaviors/FleeBehavior.hpp:149
unusedFunction:*/include/ai/behaviors/FollowBehavior.hpp:158
unusedFunction:*/include/ai/behaviors/GuardBehavior.hpp:240
unusedFunction:*/include/ai/pathfinding/PathfindingGrid.hpp:119
unusedFunction:*/include/core/ThreadSystem.hpp:340
unusedFunction:*/include/managers/ResourceFactory.hpp:86

# Variables used in debug logging (cppcheck doesn't see switch-case usage)
unreadVariable:*/managers/CollisionManager.cpp:710
unreadVariable:*/managers/CollisionManager.cpp:711
unreadVariable:*/managers/CollisionManager.cpp:712
unreadVariable:*/managers/CollisionManager.cpp:713
unreadVariable:*/managers/CollisionManager.cpp:714
unreadVariable:*/managers/CollisionManager.cpp:715
unreadVariable:*/managers/CollisionManager.cpp:716
unreadVariable:*/managers/CollisionManager.cpp:691

# Variables used in logging (threading budget variables for debugging)
unreadVariable:*/managers/EventManager.cpp:259
unreadVariable:*/managers/EventManager.cpp:260
unreadVariable:*/managers/EventManager.cpp:261
unreadVariable:*/managers/ParticleManager.cpp:798
unreadVariable:*/managers/ParticleManager.cpp:799
unreadVariable:*/managers/ParticleManager.cpp:800

# Variables used in debug/logging macros (conditionally compiled debug builds)
unreadVariable:*/managers/AIManager.cpp:586
unreadVariable:*/managers/AIManager.cpp:595
unreadVariable:*/managers/AIManager.cpp:597
unreadVariable:*/managers/AIManager.cpp:599
unreadVariable:*/managers/EventManager.cpp:262
unreadVariable:*/managers/ParticleManager.cpp:801
unreadVariable:*/managers/ParticleManager.cpp:802
unreadVariable:*/managers/ParticleManager.cpp:803

# Variables used in logging - collision manager debug output
unreadVariable:*/managers/CollisionManager.cpp:69
unreadVariable:*/managers/CollisionManager.cpp:987
unreadVariable:*/managers/CollisionManager.cpp:1010
unreadVariable:*/managers/CollisionManager.cpp:1013
unreadVariable:*/managers/CollisionManager.cpp:1016
unreadVariable:*/managers/CollisionManager.cpp:1019
unreadVariable:*/managers/CollisionManager.cpp:1022
unreadVariable:*/managers/CollisionManager.cpp:1025
unreadVariable:*/managers/CollisionManager.cpp:1028
unreadVariable:*/managers/CollisionManager.cpp:1067

# Variables scope reduction suggestions (minor style improvements, code is readable as-is)
variableScope:*/managers/CollisionManager.cpp:925

# Bounding box initialization from single point (intentional same-expression assignments)
duplicateAssignExpression:*/managers/CollisionManager.cpp:326
duplicateAssignExpression:*/managers/CollisionManager.cpp:328

# Defensive programming - always true/false conditions by design
knownConditionTrueFalse:*/gameStates/EventDemoState.cpp:1902
knownConditionTrueFalse:*/gameStates/GamePlayState.cpp:416
knownConditionTrueFalse:*/managers/AIManager.cpp:505
knownConditionTrueFalse:*/managers/CollisionManager.cpp:748
knownConditionTrueFalse:*/managers/EventManager.cpp:153
knownConditionTrueFalse:*/managers/EventManager.cpp:1424
knownConditionTrueFalse:*/managers/ParticleManager.cpp:404
knownConditionTrueFalse:*/managers/ParticleManager.cpp:1938

# Defensive programming - conditions that serve as safety checks
knownConditionTrueFalse:*/managers/CollisionManager.cpp:1125
knownConditionTrueFalse:*/managers/EventManager.cpp:154
knownConditionTrueFalse:*/managers/EventManager.cpp:1427
knownConditionTrueFalse:*/managers/ParticleManager.cpp:407
knownConditionTrueFalse:*/managers/ParticleManager.cpp:1941
knownConditionTrueFalse:*/world/WorldGenerator.cpp:72

# Functions that are part of public APIs but flagged as unused
unusedFunction:*/managers/EventManager.cpp:1712
unusedFunction:*/managers/EventManager.cpp:852

# Variables used in debug logging (GameEngine performance monitoring)
unreadVariable:*/core/GameEngine.cpp:707
unreadVariable:*/core/GameEngine.cpp:715
unreadVariable:*/core/GameEngine.cpp:268
unreadVariable:*/core/GameEngine.cpp:269

# Behavior functions kept for future AI development (marked with [[maybe_unused]])
unusedFunction:*/ai/behaviors/ChaseBehavior.cpp:399
unusedFunction:*/ai/behaviors/FleeBehavior.cpp:302
unusedFunction:*/ai/behaviors/FleeBehavior.cpp:312
unusedFunction:*/ai/behaviors/FollowBehavior.cpp:507
unusedFunction:*/ai/behaviors/GuardBehavior.cpp:884

# Variables used in logging macros (cppcheck doesn't detect usage in string concatenation)
unreadVariable:*/ai/internal/SpatialPriority.cpp:269
unreadVariable:*/ai/internal/SpatialPriority.cpp:346
unreadVariable:*/collisions/HierarchicalSpatialHash.cpp:266
unreadVariable:*/collisions/HierarchicalSpatialHash.cpp:267
unreadVariable:*/collisions/HierarchicalSpatialHash.cpp:268
unreadVariable:*/entities/NPC.cpp:265
unreadVariable:*/entities/NPC.cpp:307
unreadVariable:*/entities/Player.cpp:289
unreadVariable:*/managers/CollisionManager.cpp:96
unreadVariable:*/managers/CollisionManager.cpp:131
unreadVariable:*/managers/CollisionManager.cpp:398
unreadVariable:*/managers/CollisionManager.cpp:401
unreadVariable:*/managers/CollisionManager.cpp:404
unreadVariable:*/managers/CollisionManager.cpp:407
unreadVariable:*/managers/CollisionManager.cpp:410
unreadVariable:*/managers/CollisionManager.cpp:413
unreadVariable:*/managers/CollisionManager.cpp:416
unreadVariable:*/managers/CollisionManager.cpp:729
unreadVariable:*/managers/CollisionManager.cpp:730
unreadVariable:*/managers/CollisionManager.cpp:371
unreadVariable:*/managers/CollisionManager.cpp:372
unreadVariable:*/managers/CollisionManager.cpp:373
unreadVariable:*/managers/CollisionManager.cpp:461
unreadVariable:*/managers/CollisionManager.cpp:1460
unreadVariable:*/managers/CollisionManager.cpp:1462
unreadVariable:*/managers/CollisionManager.cpp:1465
unreadVariable:*/managers/CollisionManager.cpp:1468
unreadVariable:*/managers/CollisionManager.cpp:1470
unreadVariable:*/managers/CollisionManager.cpp:1476
unreadVariable:*/managers/EventManager.cpp:265
unreadVariable:*/managers/EventManager.cpp:266
unreadVariable:*/managers/EventManager.cpp:267
unreadVariable:*/managers/EventManager.cpp:288
unreadVariable:*/managers/EventManager.cpp:289
unreadVariable:*/managers/EventManager.cpp:290
unreadVariable:*/managers/ParticleManager.cpp:804
